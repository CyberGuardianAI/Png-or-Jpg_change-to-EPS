import tkinter as tk
from tkinter import filedialog, messagebox
import os
from pdfminer.high_level import extract_text
from docx import Document
from fpdf import FPDF
from PIL import Image
from pdf2docx import Converter
import pytesseract
from pathlib import Path

# 各个功能模块的实现
def add_toc_pdf():
    file_path = filedialog.askopenfilename(filetypes=[("PDF Files", "*.pdf")])
    if file_path:
        # 添加PDF目录的功能（这里简单使用了占位符，具体实现可以更复杂）
        messagebox.showinfo("操作", f"正在为PDF文件 {file_path} 添加目录...（此功能待实现）")
        # 假设代码为添加目录的逻辑...
        messagebox.showinfo("完成", "PDF目录添加完成！")

def add_toc_word():
    file_path = filedialog.askopenfilename(filetypes=[("Word Files", "*.docx")])
    if file_path:
        # 添加Word目录的功能（这里简单使用了占位符，具体实现可以更复杂）
        messagebox.showinfo("操作", f"正在为Word文件 {file_path} 添加目录...（此功能待实现）")
        # 假设代码为添加目录的逻辑...
        messagebox.showinfo("完成", "Word目录添加完成！")

def convert_images_to_eps():
    input_folder = filedialog.askdirectory()
    if input_folder:
        output_folder = os.path.join(input_folder, "EPS_Output")
        os.makedirs(output_folder, exist_ok=True)
        valid_extensions = ['.png', '.jpg', '.jpeg']
        MAX_DPI = 150
        MAX_SIZE = (1024, 1024)
        success_count = 0
        error_count = 0
        for filename in os.listdir(input_folder):
            if any(filename.lower().endswith(ext) for ext in valid_extensions):
                try:
                    img = Image.open(os.path.join(input_folder, filename))
                    if img.mode not in ['RGB', 'L']:
                        img = img.convert('RGB')
                    img.thumbnail(MAX_SIZE, Image.Resampling.LANCZOS)
                    output_path = os.path.join(output_folder, os.path.splitext(filename)[0] + ".eps")
                    img.save(output_path, format='EPS', dpi=(MAX_DPI, MAX_DPI))
                    success_count += 1
                except Exception as e:
                    error_count += 1
        messagebox.showinfo("完成", f"图片转换完成！成功转换 {success_count} 张图片，失败 {error_count} 张。")

def convert_to_pdf():
    file_path = filedialog.askopenfilename(filetypes=[("Word Files", "*.docx")])
    if file_path:
        output_pdf_path = os.path.splitext(file_path)[0] + ".pdf"
        document = Document(file_path)
        pdf = FPDF()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        for para in document.paragraphs:
            pdf.multi_cell(0, 10, para.text)
        pdf.output(output_pdf_path)
        messagebox.showinfo("完成", f"Word文件已成功转换为PDF: {output_pdf_path}")

def enhance_images_resolution():
    input_folder = filedialog.askdirectory()
    if input_folder:
        output_folder = os.path.join(input_folder, "Enhanced_Images")
        os.makedirs(output_folder, exist_ok=True)
        valid_extensions = ['.png', '.jpg', '.jpeg']
        for filename in os.listdir(input_folder):
            if any(filename.lower().endswith(ext) for ext in valid_extensions):
                try:
                    img = Image.open(os.path.join(input_folder, filename))
                    img = img.resize((img.width * 2, img.height * 2), Image.Resampling.LANCZOS)
                    output_path = os.path.join(output_folder, filename)
                    img.save(output_path)
                except Exception as e:
                    messagebox.showerror("错误", f"图片处理失败: {filename}")
        messagebox.showinfo("完成", "图片分辨率提升完成！")

def convert_pdf_to_word():
    file_path = filedialog.askopenfilename(filetypes=[("PDF Files", "*.pdf")])
    if file_path:
        output_word_path = os.path.splitext(file_path)[0] + ".docx"
        cv = Converter(file_path)
        cv.convert(output_word_path, start=0, end=None)
        cv.close()
        messagebox.showinfo("完成", f"PDF文件已成功转换为Word: {output_word_path}")

def translate_document():
    file_path = filedialog.askopenfilename(filetypes=[("Word Files", "*.docx")])
    if file_path:
        # 此功能需要实现文档翻译
        messagebox.showinfo("操作", f"正在翻译文档 {file_path}...")
        messagebox.showinfo("完成", "文档翻译完成！")

def convert_photo_to_word():
    file_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.png;*.jpg;*.jpeg")])
    if file_path:
        text = pytesseract.image_to_string(Image.open(file_path))
        output_docx = os.path.splitext(file_path)[0] + ".docx"
        doc = Document()
        doc.add_paragraph(text)
        doc.save(output_docx)
        messagebox.showinfo("完成", f"图片已成功转换为Word: {output_docx}")

# 创建主界面
root = tk.Tk()
root.title("统一功能界面")

# 设置界面尺寸
root.geometry("600x500")
root.config(bg="#f0f0f0")

# 添加“暨南大学网络空间安全学院”标注
college_label = tk.Label(root, text="暨南大学网络空间安全学院", font=("Arial", 14, "bold"), fg="#2f4f4f", bg="#f0f0f0")
college_label.pack(pady=10)

# 添加欢迎标签
welcome_label = tk.Label(root, text="欢迎使用文档处理工具", font=("Arial", 16, "bold"), fg="#2f4f4f", bg="#f0f0f0")
welcome_label.pack(pady=20)

# 功能模块按钮
button_frame = tk.Frame(root, bg="#f0f0f0")
button_frame.pack(pady=20)

# 各个功能的按钮
button_add_toc_pdf = tk.Button(button_frame, text="自动为PDF添加目录", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=add_toc_pdf)
button_add_toc_pdf.grid(row=0, column=0, padx=10, pady=10)

button_add_toc_word = tk.Button(button_frame, text="自动为Word添加目录", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=add_toc_word)
button_add_toc_word.grid(row=1, column=0, padx=10, pady=10)

button_convert_images_to_eps = tk.Button(button_frame, text="图片转EPS格式", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=convert_images_to_eps)
button_convert_images_to_eps.grid(row=2, column=0, padx=10, pady=10)

button_convert_to_pdf = tk.Button(button_frame, text="文件转换为PDF", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=convert_to_pdf)
button_convert_to_pdf.grid(row=3, column=0, padx=10, pady=10)

button_enhance_images_resolution = tk.Button(button_frame, text="提升图片分辨率", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=enhance_images_resolution)
button_enhance_images_resolution.grid(row=4, column=0, padx=10, pady=10)

button_convert_pdf_to_word = tk.Button(button_frame, text="PDF转Word", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=convert_pdf_to_word)
button_convert_pdf_to_word.grid(row=5, column=0, padx=10, pady=10)

button_translate_document = tk.Button(button_frame, text="翻译文档", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=translate_document)
button_translate_document.grid(row=6, column=0, padx=10, pady=10)

button_convert_photo_to_word = tk.Button(button_frame, text="图片转Word", width=40, height=2, font=("Arial", 12), bg="#007bff", fg="white", relief="raised", command=convert_photo_to_word)
button_convert_photo_to_word.grid(row=7, column=0, padx=10, pady=10)

# 退出按钮
exit_button = tk.Button(root, text="退出", command=root.quit, width=20, height=2, font=("Arial", 12), bg="#f44336", fg="white", relief="raised")
exit_button.pack(pady=20)

# 运行界面
root.mainloop()
